require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/private/seasons", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Season. As you add validations to Season, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      year: 2020,
      name: '20th Season'
    }
  }

  let(:invalid_attributes) {
    {
      year: nil
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # SeasonsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {
      "authorization": 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlJpam5PR1hNTi1kNHhXN0VRU3dMciJ9.eyJpc3MiOiJodHRwczovL2JvdHNjLmF1dGgwLmNvbS8iLCJzdWIiOiJJaVZ6cnpsVHFCa1FzemZLaVpPUTRCazdhbU5IQkM3Z0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hcGkuYm90c2MuY2EiLCJpYXQiOjE1ODk5MTU4ODYsImV4cCI6MTU5MDAwMjI4NiwiYXpwIjoiSWlWenJ6bFRxQmtRc3pmS2laT1E0Qms3YW1OSEJDN2ciLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.qOVbne139ymkmZPmnAMFrCZksTd8EqTC8LrFC1chRoGZ5ke-3eRYThNPlaGRTFtVh0rCLjl8BYC7zk6uCLl7vX6NBH2SkKpicdiOIZzQez_CCf4HXLHOqp13s-N0aCoA8ZTIYA8UgcG58oZEL0v0t4d8zUa31pjqAVs0DOU_BcWNcQeKMe_-u6a50qLNU7bD2-BR0ZvLvmCoAee0wJmZ0NSnDDfIEHClt48sEfoVoBj8XGkmzcOeXzNz9NrCFRPEJSeNIKnqQAg-dM1jRd5YkYGiCA8B9G7K1kZabvOidVQS8DWdIAFJ00cNYDIoKEkC3gQ171hmWqvjd1b47sRaQA'
    }
  }

  before {allow(controller).to receive(:authenticate_request!).and_return(true)}

  describe "GET /index" do
    it "renders a successful response" do
      Season.create! valid_attributes
      get api_v1_private_seasons_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      season = Season.create! valid_attributes
      get api_v1_private_season_url(season), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Season" do
        expect {
          post api_v1_private_seasons_url,
               params: { season: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Season, :count).by(1)
      end

      it "renders a JSON response with the new api/v1_season" do
        post api_v1_private_seasons_url,
             params: { season: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Season" do
        expect {
          post api_v1_private_seasons_url,
               params: { season: invalid_attributes }, as: :json
        }.to change(Season, :count).by(0)
      end

      it "renders a JSON response with errors for the new api/v1_season" do
        post api_v1_private_seasons_url,
             params: { season: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested api/v1_season" do
      season = Season.create! valid_attributes
      expect {
        delete api_v1_private_season_url(season), headers: valid_headers, as: :json
      }.to change(Season, :count).by(-1)
    end
  end
end
